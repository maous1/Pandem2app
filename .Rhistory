library(shiny); runApp('Pandem2app.R')
library(Pandem2simulator)
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
data("case_aggregated_formatted_BE")
data("variants_aggregated_formatted_BE")
write.csv(x = case_aggregated_formatted_BE,file = 'case_aggregated_formatted_BE.csv')
write.csv(x = variants_aggregated_formatted_BE,file = 'variants_aggregated_formatted_BE.csv')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
library(shiny)
ui <- fluidPage(
fluidRow(
column(3,
numericInput("lambda1", label = "lambda1", value = 3),
numericInput("lambda2", label = "lambda2", value = 5),
numericInput("n", label = "n", value = 1e4, min = 0),
actionButton("simulate", "Simulate!")
),
column(9, plotOutput("hist"))
)
)
server <- function(input, output, session) {
x1 <- eventReactive(input$simulate, {
rpois(input$n, input$lambda1)
})
x2 <- eventReactive(input$simulate, {
rpois(input$n, input$lambda2)
})
output$hist <- renderPlot({
freqpoly(x1(), x2(), binwidth = 1, xlim = c(0, 40))
}, res = 96)
}
shinyApp(ui, server)
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
library(shiny)
ui <- fluidPage(
fluidRow(
column(3,
numericInput("lambda1", label = "lambda1", value = 3),
numericInput("lambda2", label = "lambda2", value = 5),
numericInput("n", label = "n", value = 1e4, min = 0),
actionButton("simulate", "Simulate!")
),
column(9, plotOutput("hist"))
)
)
server <- function(input, output, session) {
x1 <- eventReactive(input$simulate, {
rpois(input$n, input$lambda1)
})
x2 <- eventReactive(input$simulate, {
rpois(input$n, input$lambda2)
})
output$hist <- renderPlot({
freqpoly(x1(), x2(), binwidth = 1, xlim = c(0, 40))
}, res = 96)
}
shinyApp(ui, server)
runApp('Pandem2app.R')
runApp('Pandem2app.R')
library(Pandem2simulator)
library(shiny)
library(vroom)
library(tidyverse)
library(Pandem2simulator)
runApp('Pandem2app.R')
library(shiny); runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
library(Pandem2multiparametric)
library(shiny); runApp('Pandem2app.R')
detach("package:Pandem2simulator", unload = TRUE)
detach("package:Pandem2multiparametric", unload = TRUE)
runApp('Pandem2app.R')
runApp('Pandem2app.R')
library(shiny)
library(vroom)
library(tidyverse)
library(Pandem2simulator)
library(Pandem2multiparametric)
options(shiny.maxRequestSize = 20 * 1024^2)
ui <- fluidPage(
navbarPage(
"Test",
id="main_navbar",
tabPanel(
"1) Upload",
fluidRow(
fileInput("upAge", "testset", accept = c(".csv", ".tsv")),
dataTableOutput("headAge")
),
fluidRow(
fileInput("upVariant", "trainset", accept = c(".csv", ".tsv")),
dataTableOutput("headVariant"),
)
),
tabPanel(
"2) Visualisation",
fluidRow(
plotOutput("plot")
),
fluidRow(
plotOutput("plot2")
)
),
tabPanel(
"3) KNN",
fluidRow(
selectInput("var","Colonne Ã  ajouter", choices = character()),
dataTableOutput("single")
),
fluidRow(
selectInput("class","Colonne", choices = character(),multiple = T),
dataTableOutput("class")
),
fluidRow(column(6,
numericInput("factor", "factor", 500,
1, 10000000, 1)),
column(6,
selectInput("geolocalisation","Split by", choices = character())
)),
fluidRow(
actionButton("button", "Go simulate!"),
dataTableOutput("knn"),
downloadButton("download", "Download .csv"))
),
tabPanel(
"4) Visualisation Knn",
fluidRow(
plotOutput("plotknn")
)
),
tabPanel(
"5) enrichment",
fluidRow(
selectInput("variable","selectionner les variables", choices = character(),multiple = T),
selectInput("group","selectionner les groups", choices = character(),multiple = T),
selectInput("variant","selectionner le variant", choices = character()),
numericInput("multiplicateur", "multiplicateur", 1.2,
1, 10000000, 0.1),
actionButton("button2", "Go enrichment"),
dataTableOutput("enrichment")
)
)
)
)
server <- function(input, output, session) {
dataAge <- reactive({
req(input$upAge)
ext <- tools::file_ext(input$upAge$name)
switch(ext,
csv = vroom::vroom(input$upAge$datapath, delim = ","),
tsv = vroom::vroom(input$upAge$datapath, delim = "\t"),
validate("Invalid file; Please upload a .csv or .tsv file")
)
})
dataVariant <- reactive({
req(input$upVariant)
ext <- tools::file_ext(input$upVariant$name)
switch(ext,
csv = vroom::vroom(input$upVariant$datapath, delim = ","),
tsv = vroom::vroom(input$upVariant$datapath, delim = "\t"),
validate("Invalid file; Please upload a .csv or .tsv file")
)
})
output$headAge <- renderDataTable(dataAge(),options = list(pageLength = 5))
output$headVariant <- renderDataTable(dataVariant(),options = list(pageLength = 5))
observeEvent(dataVariant(), {
updateSelectInput(session, "var", choices = names(dataVariant()))
})
output$single <- renderDataTable({dataVariant()[input$var]},options = list(pageLength = 5))
observeEvent(dataAge(), {
updateSelectInput(session, "class", choices = names(dataAge()))
})
observeEvent(dataAge(), {
updateSelectInput(session, "geolocalisation", choices = names(dataAge()))
})
output$class <- renderDataTable({dataAge()[input$class]},options = list(pageLength = 5))
dataknn <- eventReactive(input$button, {
simulator(trainset = dataVariant(),testset = dataAge(),geolocalisation =input$geolocalisation,outcome = input$var,count = 'new_cases', time= input$class,factor = input$factor)
})
output$knn <- renderDataTable(dataknn(),options = list(pageLength = 5))
output$download <- downloadHandler(
filename = function() {
paste0("knn", ".csv")
},
content = function(file) {
vroom::vroom_write(dataknn(), file)
}
)
uniq_variant <- reactive({
uniq_variant <- unique(dataVariant()$variant)
myColors <- rainbow(length(uniq_variant))
names(myColors) <- uniq_variant
myColors[names(myColors)=="NSQ"] = "#606060"
colScale <- scale_fill_manual(name = "variant",values = myColors)
})
output$plot <- renderPlot({
ggplot(data=dataVariant(), aes(x=time, y=new_cases, fill=variant)) +
geom_bar(stat="identity") + ggtitle("BE ecdc") + theme(axis.text.x = element_text(angle = 90))+ uniq_variant()
}, res = 96)
output$plot2 <- renderPlot({
ggplot(data=dataAge(), aes(x=time, y=new_cases)) +
geom_bar(stat="identity") + ggtitle("Belgium")+ xlab("Group age") + ylab("number")+facet_wrap(vars(age_group))+ theme(axis.text.x = element_text(angle = 90))
}, res = 96)
output$plotknn <- renderPlot({
ggplot(data=dataknn(), aes(x=time, y=new_cases, fill=variant)) +
geom_bar(stat="identity") + ggtitle("BE prediction") + theme(axis.text.x = element_text(angle = 90))+
uniq_variant() + facet_wrap(vars(age_group))
}, res = 96)
observeEvent(knn(), {
updateSelectInput(session, "variable", choices = names(knn()))
})
observeEvent(knn(), {
updateSelectInput(session, "group", choices = unique(knn()[input$variable]))
})
observeEvent(knn(), {
updateSelectInput(session, "variant", choices = names(knn()))
})
enrichment <- eventReactive(input$button2,{
enrichment_variant(data_aggregated = dataknn(),
variable = c("age_group","hospitalization"),group = c("<15yr","no_hospi"),
variants = "B.1.1.7", multiplicateur = 5,time = "time")
})
output$enrichment <- renderDataTable(enrichment(),options = list(pageLength = 5))
}
shinyApp(ui, server)
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
data("variants_aggregated_formatted_BE")
variants_aggregated_formatted_BE
variants_aggregated_formatted_BE$variant
unique(variants_aggregated_formatted_BE$variant)
unlist(unique(variants_aggregated_formatted_BE$variant))
runApp('Pandem2app.R')
variants_aggregated_formatted_BE["variants"]
variants_aggregated_formatted_BE["variant"]
unique(variants_aggregated_formatted_BE["variant"])
unlist(unique(variants_aggregated_formatted_BE["variant"]))
unlist(unique(variants_aggregated_formatted_BE["variant"]))[1]
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
unlist(unique(variants_aggregated_formatted_BE["variant"]))[1]
unlist(unique(variants_aggregated_formatted_BE["variant"]))[1]=="variant1"
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
unlist(unique(variants_aggregated_formatted_BE["variant"]))[1]
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
install.packages("dslabs")
library(dslabs)
heigth
data(heigth)
data("heigth")
heights
data(heights)
force(heights)
class(heights)
class(heights$sex)
class(heights$height)
class(heights$sex[1])
heights$sex[1]
heights$sex[1][1]
heights$sex[[1]]
dim(heights)
heights[777]
heights[777,]
heights$sex[777]
heights[1,777]
heights[777,1]
max(heights$height)
min(heights$height)
heights[min(heights$height)]
heights[heights == min(heights$height)]
heights == min(heights$height)
heights$height == min(heights$height)
BiocManager::version()
BiocManager::install(c("genefu",
"COPDSexualDimorphism",
"gwascat",
"hgu133a.db",
"genomicsclass/tissuesGeneExpression"))
library(genefu)
data(sig.gene70)
dim(sig.gene70)
head(sig.gene70)[,1:6]
BiocManager::install("COPDSexualDimorphism.data")
data(lgrc.expr.meta)
library(COPDSexualDimorphism.data)
data(lgrc.expr.meta)
View(expr.meta)
