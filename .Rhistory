}
)
uniq_variant <- reactive({
uniq_variant <- unique(dataVariant()$variant)
myColors <- rainbow(length(uniq_variant))
names(myColors) <- uniq_variant
myColors[names(myColors)=="NSQ"] = "#606060"
colScale <- scale_fill_manual(name = "variant",values = myColors)
})
output$plot <- renderPlot({
ggplot(data=dataVariant(), aes(x=time, y=new_cases, fill=variant)) +
geom_bar(stat="identity") + ggtitle("BE ecdc") + theme(axis.text.x = element_text(angle = 90))+ uniq_variant()
}, res = 96)
output$plot2 <- renderPlot({
ggplot(data=dataAge(), aes(x=time, y=new_cases)) +
geom_bar(stat="identity") + ggtitle("Belgium")+ xlab("Group age") + ylab("number")+facet_wrap(vars(age_group))+ theme(axis.text.x = element_text(angle = 90))
}, res = 96)
output$plotknn <- renderPlot({
ggplot(data=dataknn(), aes(x=time, y=new_cases, fill=variant)) +
geom_bar(stat="identity") + ggtitle("BE prediction") + theme(axis.text.x = element_text(angle = 90))+
uniq_variant() + facet_wrap(vars(age_group))
}, res = 96)
observeEvent(knn(), {
updateSelectInput(session, "variable", choices = names(knn()))
})
observeEvent(knn(), {
updateSelectInput(session, "group", choices = unique(knn()[input$variable]))
})
observeEvent(knn(), {
updateSelectInput(session, "variant", choices = names(knn()))
})
enrichment <- eventReactive(input$button2,{
enrichment_variant(data_aggregated = dataknn(),
variable = c("age_group","hospitalization"),group = c("<15yr","no_hospi"),
variants = "B.1.1.7", multiplicateur = 5,time = "time")
})
output$enrichment <- renderDataTable(enrichment(),options = list(pageLength = 5))
}
shinyApp(ui, server)
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
data("variants_aggregated_formatted_BE")
variants_aggregated_formatted_BE
variants_aggregated_formatted_BE$variant
unique(variants_aggregated_formatted_BE$variant)
unlist(unique(variants_aggregated_formatted_BE$variant))
runApp('Pandem2app.R')
variants_aggregated_formatted_BE["variants"]
variants_aggregated_formatted_BE["variant"]
unique(variants_aggregated_formatted_BE["variant"])
unlist(unique(variants_aggregated_formatted_BE["variant"]))
unlist(unique(variants_aggregated_formatted_BE["variant"]))[1]
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
unlist(unique(variants_aggregated_formatted_BE["variant"]))[1]
unlist(unique(variants_aggregated_formatted_BE["variant"]))[1]=="variant1"
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
unlist(unique(variants_aggregated_formatted_BE["variant"]))[1]
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
runApp('Pandem2app.R')
install.packages("dslabs")
library(dslabs)
heigth
data(heigth)
data("heigth")
heights
data(heights)
force(heights)
class(heights)
class(heights$sex)
class(heights$height)
class(heights$sex[1])
heights$sex[1]
heights$sex[1][1]
heights$sex[[1]]
dim(heights)
heights[777]
heights[777,]
heights$sex[777]
heights[1,777]
heights[777,1]
max(heights$height)
min(heights$height)
heights[min(heights$height)]
heights[heights == min(heights$height)]
heights == min(heights$height)
heights$height == min(heights$height)
BiocManager::version()
BiocManager::install(c("genefu",
"COPDSexualDimorphism",
"gwascat",
"hgu133a.db",
"genomicsclass/tissuesGeneExpression"))
library(genefu)
data(sig.gene70)
dim(sig.gene70)
head(sig.gene70)[,1:6]
BiocManager::install("COPDSexualDimorphism.data")
data(lgrc.expr.meta)
library(COPDSexualDimorphism.data)
data(lgrc.expr.meta)
View(expr.meta)
read.csv("date_case.csv")
case = read.csv("date_case.csv")
variant = read.csv('variants_aggregated_formatted_BE.csv')
variant
case
View(case)
View(variant)
library(Pandem2Application)
trainset = variant
testset = case
time = "time"
outcome = 'variant'
count = "cases"
factor = 500
bymonth = T
if (!any(names(trainset) %in% time)) {
if (!any(names(testset) %in% time)) {
stop("error : wrong time in testset and trainset")
}
stop("error : wrong time in  trainset")
}
if (!any(names(testset) %in% time)) {
stop("error : wrong time in testset")
}
if (!any(names(trainset) %in% outcome)) {
stop("error : wrong outcome in trainset")
}
if (!any(names(trainset) %in% count)) {
if (!any(names(testset) %in% count)) {
stop("error : wrong count in testset and trainset")
}
stop("error : wrong count in  trainset")
}
if (!any(names(testset) %in% count)) {
stop("error : wrong count in testset")
}
names(trainset)[names(trainset) %in% count] <- "new_cases"
names(trainset)[names(trainset) %in% time] <- "time"
names(testset)[names(testset) %in% count] <- "new_cases"
names(testset)[names(testset) %in% time] <- "time"
trainset_list <- na.omit(trainset)
testset_list <- na.omit(testset) %>% filter(new_cases > 0)
trainset_list <- trainset_list %>%
group_by(time) %>%
mutate(sum = sum(new_cases)) %>%
rowwise() %>%
mutate(new_cases = ifelse(sum < factor, new_cases, as.integer(round(factor * new_cases / sum)))) %>%
filter(new_cases > 0) %>%
select(-sum)
library(dplyr)
library(class, lib.loc = "/usr/lib/R/library")
library(purrr, lib.loc = "/usr/lib/R/library")
library(lubridate, lib.loc = "/usr/lib/R/library")
library(splitstackshape)
testset_list <- na.omit(testset) %>% filter(new_cases > 0)
trainset_list <- trainset_list %>%
group_by(time) %>%
mutate(sum = sum(new_cases)) %>%
rowwise() %>%
mutate(new_cases = ifelse(sum < factor, new_cases, as.integer(round(factor * new_cases / sum)))) %>%
filter(new_cases > 0) %>%
select(-sum)
##### fragmentation by chunk of 1 month
if (bymonth == T) {
splitbychunk <- function(trainset_df) {
trainset_df <- trainset_df %>%
mutate(year_month = format(as.Date(time), "%Y-%m")) %>%
split(.$year_month) %>%
map(.f = function(x) x %>% select(-year_month))
return(trainset_df)
}
trainset_list <- splitbychunk(trainset_list)
testset_list <- splitbychunk(testset_list)
trainset_list <- unlist(trainset_list, recursive = F)
testset_list <- unlist(testset_list, recursive = F)
common_date <- intersect(names(trainset_list), names(testset_list))
if (is_empty(common_date)) {
stop("not the same date")
}
message(paste(c("Date exclusive to trainset : ", setdiff(names(trainset_list), names(testset_list))), collapse = " "))
message(paste(c("Date exclusive to testset : ", setdiff(names(testset_list), names(trainset_list))), collapse = " "))
trainset_list <- trainset_list[is.element(names(trainset_list), common_date)]
testset_list <- testset_list[is.element(names(testset_list), common_date)]
}
simulator_1geo <- function(trainset_1geo, testset_1geo, time, outcome, count = NULL) {
set.seed(2)
trainset_1geo <- trainset_1geo %>%
expandRows(count = count, drop = T) %>%
rowwise() %>%
mutate(time_num = as.numeric(as.Date(time))) %>%
mutate(time_jitter = time_num + rnorm(length(time_num), 0, 3))
testset_1geo <- testset_1geo %>%
expandRows(count = count, drop = T) %>%
mutate(time_num = as.numeric(as.Date(time))) %>%
mutate(time_jitter = time_num + rnorm(length(time_num), 0, 3))
######## knn prediction
trainset_predictor <- trainset_1geo["time_jitter"]
testset_predictor <- testset_1geo["time_jitter"]
trainset_class <- trainset_1geo[outcome]
pr <- knn(
train = data.frame(trainset_predictor),
test = testset_predictor,
cl = unlist(trainset_class),
k = 1
)
# Create variant variable and aggregation
testset_1geo[outcome] <- as.character(pr)
# Concatenate prediction file for all countries
testset_1geo <- testset_1geo %>%
select(-c(time_jitter, time_num)) %>%
group_by_all() %>%
summarise(new_cases = n(), .groups = "drop")
return(testset_1geo)
}
###### apply the knn prediction on each compoent of the lists
testset_predicted <- map2_df(.x = trainset_list, .y = testset_list, .f = function(.x, .y) simulator_1geo(trainset_1geo = .x, testset_1geo = .y, time = "time", outcome = outcome, count = "new_cases"))
trainset_list
testset_list
trainset = variant
testset = case
if (!any(names(trainset) %in% time)) {
if (!any(names(testset) %in% time)) {
stop("error : wrong time in testset and trainset")
}
stop("error : wrong time in  trainset")
}
if (!any(names(testset) %in% time)) {
stop("error : wrong time in testset")
}
if (!any(names(trainset) %in% outcome)) {
stop("error : wrong outcome in trainset")
}
if (!any(names(trainset) %in% count)) {
if (!any(names(testset) %in% count)) {
stop("error : wrong count in testset and trainset")
}
stop("error : wrong count in  trainset")
}
if (!any(names(testset) %in% count)) {
stop("error : wrong count in testset")
}
names(trainset)[names(trainset) %in% count] <- "new_cases"
names(trainset)[names(trainset) %in% time] <- "time"
names(testset)[names(testset) %in% count] <- "new_cases"
names(testset)[names(testset) %in% time] <- "time"
####### split the dataframe in a list of dataframe (one per geolocalisation) and keep common geolocalisation
trainset_list <- na.omit(trainset)
testset_list <- na.omit(testset) %>% filter(new_cases > 0)
###### reduce the training dataset
trainset_list <- trainset_list %>%
group_by(time) %>%
mutate(sum = sum(new_cases)) %>%
rowwise() %>%
mutate(new_cases = ifelse(sum < factor, new_cases, as.integer(round(factor * new_cases / sum)))) %>%
filter(new_cases > 0) %>%
select(-sum)
######### definition of the function to simulate on 1 geolocalisation
simulator_1geo <- function(trainset_1geo, testset_1geo, time, outcome, count = NULL) {
set.seed(2)
trainset_1geo <- trainset_1geo %>%
expandRows(count = count, drop = T) %>%
rowwise() %>%
mutate(time_num = as.numeric(as.Date(time))) %>%
mutate(time_jitter = time_num + rnorm(length(time_num), 0, 3))
testset_1geo <- testset_1geo %>%
expandRows(count = count, drop = T) %>%
mutate(time_num = as.numeric(as.Date(time))) %>%
mutate(time_jitter = time_num + rnorm(length(time_num), 0, 3))
######## knn prediction
trainset_predictor <- trainset_1geo["time_jitter"]
testset_predictor <- testset_1geo["time_jitter"]
trainset_class <- trainset_1geo[outcome]
pr <- knn(
train = data.frame(trainset_predictor),
test = testset_predictor,
cl = unlist(trainset_class),
k = 1
)
# Create variant variable and aggregation
testset_1geo[outcome] <- as.character(pr)
# Concatenate prediction file for all countries
testset_1geo <- testset_1geo %>%
select(-c(time_jitter, time_num)) %>%
group_by_all() %>%
summarise(new_cases = n(), .groups = "drop")
return(testset_1geo)
}
###### apply the knn prediction on each compoent of the lists
testset_predicted <- map2_df(.x = trainset_list, .y = testset_list, .f = function(.x, .y) simulator_1geo(trainset_1geo = .x, testset_1geo = .y, time = "time", outcome = outcome, count = "new_cases"))
testset_list
trainset_list
trainset_list <- na.omit(trainset)
trainset_list
testset_list <- na.omit(testset) %>% filter(new_cases > 0)
trainset_list <- trainset_list %>%
group_by(time) %>%
mutate(sum = sum(new_cases)) %>%
rowwise() %>%
mutate(new_cases = ifelse(sum < factor, new_cases, as.integer(round(factor * new_cases / sum)))) %>%
filter(new_cases > 0) %>%
select(-sum)
trainset_list
simulator_1geo <- function(trainset_1geo, testset_1geo, time, outcome, count = NULL) {
set.seed(2)
trainset_1geo <- trainset_1geo %>%
expandRows(count = count, drop = T) %>%
rowwise() %>%
mutate(time_num = as.numeric(as.Date(time))) %>%
mutate(time_jitter = time_num + rnorm(length(time_num), 0, 3))
testset_1geo <- testset_1geo %>%
expandRows(count = count, drop = T) %>%
mutate(time_num = as.numeric(as.Date(time))) %>%
mutate(time_jitter = time_num + rnorm(length(time_num), 0, 3))
######## knn prediction
trainset_predictor <- trainset_1geo["time_jitter"]
testset_predictor <- testset_1geo["time_jitter"]
trainset_class <- trainset_1geo[outcome]
pr <- knn(
train = data.frame(trainset_predictor),
test = testset_predictor,
cl = unlist(trainset_class),
k = 1
)
# Create variant variable and aggregation
testset_1geo[outcome] <- as.character(pr)
# Concatenate prediction file for all countries
testset_1geo <- testset_1geo %>%
select(-c(time_jitter, time_num)) %>%
group_by_all() %>%
summarise(new_cases = n(), .groups = "drop")
return(testset_1geo)
}
trainset_1geo = trainset_list
testset_1geo = testset_list
set.seed(2)
trainset_1geo <- trainset_1geo %>%
expandRows(count = count, drop = T) %>%
rowwise() %>%
mutate(time_num = as.numeric(as.Date(time))) %>%
mutate(time_jitter = time_num + rnorm(length(time_num), 0, 3))
trainset_1geo
count
count
names(trainset)[names(trainset) %in% count] <- "new_cases"
names(trainset)[names(trainset) %in% time] <- "time"
names(testset)[names(testset) %in% count] <- "new_cases"
names(testset)[names(testset) %in% time] <- "time"
trainset_1geo <- trainset_1geo %>%
expandRows(count = count, drop = T) %>%
rowwise() %>%
mutate(time_num = as.numeric(as.Date(time))) %>%
mutate(time_jitter = time_num + rnorm(length(time_num), 0, 3))
trainset_1geo = trainset_list
testset_1geo = testset_list
trainset_1geo <- trainset_1geo %>%
expandRows(count = count, drop = T) %>%
rowwise() %>%
mutate(time_num = as.numeric(as.Date(time))) %>%
mutate(time_jitter = time_num + rnorm(length(time_num), 0, 3))
trainset_1geo
count
count = "new_cases"
trainset_1geo <- trainset_1geo %>%
expandRows(count = count, drop = T) %>%
rowwise() %>%
mutate(time_num = as.numeric(as.Date(time))) %>%
mutate(time_jitter = time_num + rnorm(length(time_num), 0, 3))
testset_1geo <- testset_1geo %>%
expandRows(count = count, drop = T) %>%
mutate(time_num = as.numeric(as.Date(time))) %>%
mutate(time_jitter = time_num + rnorm(length(time_num), 0, 3))
trainset_predictor <- trainset_1geo["time_jitter"]
testset_predictor <- testset_1geo["time_jitter"]
trainset_class <- trainset_1geo[outcome]
pr <- knn(
train = data.frame(trainset_predictor),
test = testset_predictor,
cl = unlist(trainset_class),
k = 1
)
# Create variant variable and aggregation
testset_1geo[outcome] <- as.character(pr)
testset_1geo <- testset_1geo %>%
select(-c(time_jitter, time_num)) %>%
group_by_all() %>%
summarise(new_cases = n(), .groups = "drop")
return(testset_1geo)
trainset = variant
testset = case
time = "time"
outcome = 'variant'
count = "cases"
factor = 500
if (!any(names(trainset) %in% time)) {
if (!any(names(testset) %in% time)) {
stop("error : wrong time in testset and trainset")
}
stop("error : wrong time in  trainset")
}
case = read.csv("date_case.csv")
variant = read.csv('variants_aggregated_formatted_BE.csv')
trainset = variant
testset = case
if (!any(names(trainset) %in% time)) {
if (!any(names(testset) %in% time)) {
stop("error : wrong time in testset and trainset")
}
stop("error : wrong time in  trainset")
}
if (!any(names(testset) %in% time)) {
stop("error : wrong time in testset")
}
if (!any(names(trainset) %in% outcome)) {
stop("error : wrong outcome in trainset")
}
if (!any(names(trainset) %in% count)) {
if (!any(names(testset) %in% count)) {
stop("error : wrong count in testset and trainset")
}
stop("error : wrong count in  trainset")
}
if (!any(names(testset) %in% count)) {
stop("error : wrong count in testset")
}
names(trainset)[names(trainset) %in% count] <- "new_cases"
names(trainset)[names(trainset) %in% time] <- "time"
names(testset)[names(testset) %in% count] <- "new_cases"
names(testset)[names(testset) %in% time] <- "time"
####### split the dataframe in a list of dataframe (one per geolocalisation) and keep common geolocalisation
trainset_list <- na.omit(trainset)
testset_list <- na.omit(testset) %>% filter(new_cases > 0)
###### reduce the training dataset
trainset_list <- trainset_list %>%
group_by(time) %>%
mutate(sum = sum(new_cases)) %>%
rowwise() %>%
mutate(new_cases = ifelse(sum < factor, new_cases, as.integer(round(factor * new_cases / sum)))) %>%
filter(new_cases > 0) %>%
select(-sum)
######### definition of the function to simulate on 1 geolocalisation
simulator_1geo <- function(trainset_1geo, testset_1geo, time, outcome, count = NULL) {
set.seed(2)
trainset_1geo <- trainset_1geo %>%
expandRows(count = count, drop = T) %>%
rowwise() %>%
mutate(time_num = as.numeric(as.Date(time))) %>%
mutate(time_jitter = time_num + rnorm(length(time_num), 0, 3))
testset_1geo <- testset_1geo %>%
expandRows(count = count, drop = T) %>%
mutate(time_num = as.numeric(as.Date(time))) %>%
mutate(time_jitter = time_num + rnorm(length(time_num), 0, 3))
######## knn prediction
trainset_predictor <- trainset_1geo["time_jitter"]
testset_predictor <- testset_1geo["time_jitter"]
trainset_class <- trainset_1geo[outcome]
pr <- knn(
train = data.frame(trainset_predictor),
test = testset_predictor,
cl = unlist(trainset_class),
k = 1
)
# Create variant variable and aggregation
testset_1geo[outcome] <- as.character(pr)
# Concatenate prediction file for all countries
testset_1geo <- testset_1geo %>%
select(-c(time_jitter, time_num)) %>%
group_by_all() %>%
summarise(new_cases = n(), .groups = "drop")
return(testset_1geo)
}
###### apply the knn prediction on each compoent of the lists
testset_predicted <- map2_df(.x = trainset_list, .y = testset_list, .f = function(.x, .y) simulator_1geo(trainset_1geo = .x, testset_1geo = .y, time = "time", outcome = outcome, count = "new_cases"))
###### apply the knn prediction on each compoent of the lists
testset_predicted <- map2(.x = trainset_list, .y = testset_list, .f = function(.x, .y) simulator_1geo(trainset_1geo = .x, testset_1geo = .y, time = "time", outcome = outcome, count = "new_cases"))
trainset_list
testset_list
###### apply the knn prediction on each compoent of the lists
testset_predicted <-  simulator_1geo(trainset_1geo = trainset_list, testset_1geo = testset_list, time = "time", outcome = outcome, count = "new_cases")
testset_predicted <- union_all(testset_predicted, testset_nosimulated)
names(testset_predicted)[names(testset_predicted) %in% "time"] <- time
testset_predicted <- union_all(testset_predicted)
names(testset_predicted)[names(testset_predicted) %in% "time"] <- time
names(testset_predicted)[names(testset_predicted) %in% "cases"] <- count
return(testset_predicted)
case = read.csv("date_case.csv")
variant = read.csv('variants_aggregated_formatted_BE.csv')
simulator_withoutsplit(trainset = variant,testset = case,time = "time",outcome = 'variant',count = "cases",factor = 500)
library(Pandem2Application)
simulator_withoutsplit(trainset = variant,testset = case,time = "time",outcome = 'variant',count = "cases",factor = 500)
detach("package:Pandem2Application", unload = TRUE)
library(Pandem2Application)
simulator_withoutsplit(trainset = variant,testset = case,time = "time",outcome = 'variant',count = "cases",factor = 500)
